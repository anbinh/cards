(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

require('./services');
require('./filters');
require('./directives');
require('./controllers');

// app.js
angular.module('app', [
    'ht.services',
    'ht.directives',
    'ht.filters',
    'ht.controllers',
    'ht.templates',
    'ngRoute',
    'ngResource',
    'angular-storage',
    'oitozero.ngSweetAlert',
    'ui.bootstrap',
    'nouislider'
]);
},{"./controllers":2,"./directives":18,"./filters":20,"./services":24}],2:[function(require,module,exports){
'use strict';
var m = angular.module('ht.controllers', []);


// controllers
require('./lib/home')(m);
require('./lib/store-list')(m);
require('./lib/checkout')(m);
require('./lib/review_order')(m);
require('./lib/login')(m);
require('./lib/register')(m);
require('./lib/profile')(m);
require('./lib/profile-edit')(m);
require('./lib/profile-order-list')(m);
require('./lib/profile-order-detail')(m);
require('./lib/forget-password')(m);
require('./lib/reset-password')(m);
require('./lib/shopping-cart')(m);
require('./lib/store-detail')(m);
require('./lib/header')(m);


module.exports = m;
},{"./lib/checkout":3,"./lib/forget-password":4,"./lib/header":5,"./lib/home":6,"./lib/login":7,"./lib/profile":11,"./lib/profile-edit":8,"./lib/profile-order-detail":9,"./lib/profile-order-list":10,"./lib/register":12,"./lib/reset-password":13,"./lib/review_order":14,"./lib/shopping-cart":15,"./lib/store-detail":16,"./lib/store-list":17}],3:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('CheckoutController', ['$scope', '$location', '$routeParams', 'authService', 'store',
        function($scope, $location, $routeParams, authService, store) {

            $scope.selectedCards = store.get('cart');


            if (!authService.isAuthenticated()) {
                window.location = '/unauthorized/';
            }


            $scope.user = store.get('user');



            // Calculate cards' stats
            var total = 0;
            var totalFaceValue = 0;
            var totalPercentage = 0;

            for (var i = 0; i < $scope.selectedCards.length; i = i + 1) {
                var card = $scope.selectedCards[i];
                total += card.pay;
                totalFaceValue += card.value;
                totalPercentage += (card.pay / card.value * 100);
            }
            $scope.total = total;
            $scope.totalFaceValue = totalFaceValue;
            $scope.averagePercentage = totalPercentage / $scope.selectedCards.length;


            $scope.placeOrder = function() {

                var order = {
                    billingUser: $scope.user,
                    cards: $scope.selectedCards,
                };

                store.set('order', order);

                window.location = '/checkout/#/review_order';
            };
        }
    ]);
};
},{}],4:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ForgetPasswordController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {

            $scope.forgetPassword = function() {

                userService.forgetPassword({
                    email: $scope.email
                }, function(ret) {
                    console.log(ret);
                    $scope.email = '';
                    swal({
                        title: 'Done',
                        text: 'An email to reset your password has been sent to your email',
                        type: 'success',
                        showCancelButton: true,
                        confirmButtonText: 'Go To Homepage',
                        closeOnConfirm: false,
                        confirmButtonColor: '#08C',
                    }, function() {
                        window.location = '/';
                    });
                }, function(err) {
                    swal('Error', err.data.message, 'error');
                });
            };

        }
    ]);
};
},{}],5:[function(require,module,exports){
'use strict';

module.exports = function(m) {
    m.controller('HeaderController', ['$scope', '$rootScope', 'store', '$location', 'authService',
        function($scope, $rootScope, store, $location, authService) {

            var getTotal = function(cards) {
                var total = 0;
                for (var i = cards.length - 1; i >= 0; i = i - 1) {
                    total += cards[i].pay;
                }
                return total;
            };

            var m, n;

            if (authService.isAuthenticated()) {
                $scope.loggedIn = true;
            } else {
                $scope.loggedIn = false;
            }

            $scope.showCheckout = false;

            // store.set("cart", []);
            $scope.selectedCards = [];
            var tmp = store.get('cart');
            if (tmp) {
                console.log(tmp);
                $scope.selectedCards = tmp;
                m = getTotal($scope.selectedCards);
                n = $scope.selectedCards.length;
                $scope.cartStat = 'Cart (' + n + ') - $ ' + m;

                if (n > 0) {
                    $scope.showCheckout = true;
                }
            }



            $rootScope.$on('CHANGE_CART', function() {
                $scope.selectedCards = store.get('cart');
                m = getTotal($scope.selectedCards);
                n = $scope.selectedCards.length;
                $scope.cartStat = 'Cart (' + n + ') - $' + m;

                if (n > 0) {
                    $scope.showCheckout = true;
                }

            });

            $scope.removeCard = function(index) {
                var cards = store.get('cart');
                cards.splice(index, 1);

                store.set('cart', cards);
                $scope.selectedCards = store.get('cart');
                m = getTotal($scope.selectedCards);
                n = $scope.selectedCards.length;
                $scope.cartStat = 'Cart (' + n + ') - $' + m;

            };

            $scope.viewShoppingCart = function() {
                window.location = '/shopping-cart/#/';
            };
            $scope.checkout = function() {
                window.location = '/checkout/#/';
            };

            $scope.signOut = function() {
                store.remove('user');
                window.location = '/';
            };
        }
    ]);

};
},{}],6:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('HomeController', function($scope, store, $location, storeService, authService) {

        $scope.auth = authService.auth();

        // alert("HOME Controller");
        console.log('HOME CONTROLLER', storeService);

        $scope.featuredstoreService = storeService.featured();

        $scope.bestsellingStores = storeService.bestSelling();

        $scope.login = function() {

        };

        $scope.logout = function() {

        };





        $scope.search = function() {
            window.location = '/search/#/?q=' + $scope.query;
        };

        $scope.go = function(path) {
            window.location = path;
        };




    });
};
},{}],7:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('LoginController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {


            $scope.login = function() {
                userService.login($scope.user, function(ret) {

                    console.log(ret);
                    store.set('user', ret);
                    window.location = '/profile';
                }, function(err) {
                    swal('Error', err.data.message, 'error');
                });
            };
        }
    ]);
};
},{}],8:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ProfileEditController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {

            if (!authService.isAuthenticated()) {
                window.location = '/unauthorized/';
            }

            $scope.user = store.get('user');
            console.log($scope.user, 'edit user');

            $scope.update = function() {
                console.log('user', $scope.user);

                userService.update({
                    id: $scope.user.id
                }, $scope.user, function(ret) {
                    console.log('USER HAS BEEN UPDATED', ret);
                    store.set('user', ret);

                    window.location = '/profile/';

                }, function(err) {
                    swal('Error', err.data.message, 'error');
                });
            };
        }
    ]);
};
},{}],9:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ProfileOrderDetailController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService', 'orderService',
        function($scope, $location, $routeParams, authService, store, userService, orderService) {

            if (!authService.isAuthenticated()) {
                window.location = '/unauthorized/';
            }

            $scope.order = orderService.get({
                id: $routeParams.id
            }, function(order) {
                // Calculate cards' stats
                var total = 0;
                var totalFaceValue = 0;
                var totalPercentage = 0;

                for (var i = 0; i < $scope.order.cards.length; i = i + 1) {
                    var card = $scope.order.cards[i];
                    total += card.pay;
                    totalFaceValue += card.value;
                    totalPercentage += (card.pay / card.value * 100);
                }
                $scope.total = total;
                $scope.totalFaceValue = totalFaceValue;
                $scope.averagePercentage = totalPercentage / $scope.order.cards.length;

            });
        }
    ]);
};
},{}],10:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ProfileOrderListController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {

            if (!authService.isAuthenticated()) {
                window.location = '/unauthorized/';
            }

            var user = store.get('user');

            $scope.orders = userService.getOrdersByUserId({
                id: user.id,
            }, function(ret) {
                // console.log('RET', ret);
            }, function(err) {
                swal('Error', err.data.message, 'error');
            });


            $scope.orderDetail = function(id) {
                window.location = '/profile/#/orders/' + id;
            };
        }
    ]);
};
},{}],11:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ProfileController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {

            if (!authService.isAuthenticated()) {
                window.location = '/unauthorized/';
            }

            $scope.user = store.get('user');



        }
    ]);
};
},{}],12:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('RegisterController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {


            $scope.signUp = function() {
                console.log('NEW USER', $scope.user);

                var user = angular.copy($scope.user);

                var UserService = userService;

                if (user.password !== user.password2) {
                    swal('Error!', 'Your password does not match', 'error');
                    return;
                }

                delete user.password2;

                var us = new UserService(user);
                us.$save(function(result) {
                    store.set('user', result);

                    window.location = '/profile';


                }, function(err) {
                    // console.log("ERRR", err);
                    swal('Error', err.data.message, 'error');
                });
            };
        }
    ]);
};
},{}],13:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ResetPasswordController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {



            $scope.resetPassword = function() {
                if ($scope.password !== $scope.password2) {
                    swal('Error!', 'Your password does not match', 'error');
                    return;
                }


                userService.resetPassword({
                    token: $routeParams.token,
                    password: $scope.password
                }, function(ret) {
                    console.log(ret);

                    $scope.password = '';
                    $scope.password2 = '';
                    swal({
                        title: 'Done',
                        text: 'Your password has been reset',
                        type: 'success',
                        showCancelButton: true,
                        confirmButtonText: 'Login',
                        closeOnConfirm: false,
                        confirmButtonColor: '#08C',
                    }, function() {
                        window.location = '/login/';
                    });

                }, function(err) {
                    swal('Error', err.data.message, 'error');
                });
            };

        }
    ]);
};
},{}],14:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ReviewOrderController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {


            if (!authService.isAuthenticated()) {
                window.location = '/unauthorized/';

                return;
            }


            $scope.order = store.get('order');

            var user = store.get('user');

            console.log('order', $scope.order);


            // Calculate cards' stats
            var total = 0;
            var totalFaceValue = 0;
            var totalPercentage = 0;

            for (var i = 0; i < $scope.order.cards.length; i = i + 1) {
                var card = $scope.order.cards[i];
                total += card.pay;
                totalFaceValue += card.value;
                totalPercentage += (card.pay / card.value * 100);
            }
            $scope.total = total;
            $scope.totalFaceValue = totalFaceValue;
            $scope.averagePercentage = totalPercentage / $scope.order.cards.length;



            $scope.pay = function() {
                var order = {
                    user_id: user.id,
                    billing_user: $scope.order.billingUser,
                    cards: $scope.order.cards,
                    total_amount: total,
                    total_cards: $scope.order.cards.length,
                    total_face_value: $scope.totalFaceValue,
                    average_percentage: $scope.averagePercentage
                };



                userService.pay(order, function(result) {

                    store.set('cart', []);

                    window.location = '/profile/#/orders/' + result.id;

                    console.log('PAYMENT', result);
                }, function(err) {
                    // console.log("ERRR", err);
                    swal('Error', err.data.message, 'error');
                });
            };

        }
    ]);
};
},{}],15:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ShoppingCartController', ['$scope', '$location', '$routeParams', 'authService', 'store', '$rootScope',
        function($scope, $location, $routeParams, authService, store, $rootScope) {

            var getTotal = function(cards) {
                var total = 0;
                for (var i = cards.length - 1; i >= 0; i = i - 1) {
                    total += cards[i].pay;
                }
                return total;
            };

            $scope.selectedCards = store.get('cart');

            var total = 0;
            for (var i = $scope.selectedCards.length - 1; i >= 0; i = i - 1) {
                total += $scope.selectedCards[i].pay;
            }
            $scope.total = total;

            $scope.checkout = function() {
                window.location = '/checkout';
            };

            $scope.removeCard = function(index) {
                var cards = store.get('cart');
                cards.splice(index, 1);

                store.set('cart', cards);
                $scope.selectedCards = store.get('cart');

                $scope.total = getTotal($scope.selectedCards);

                $rootScope.$broadcast('CHANGE_CART');

            };

        }
    ]);

};
},{}],16:[function(require,module,exports){
'use strict';

module.exports = function(m) {
    m.controller('StoreDetailController', ['$scope', '$routeParams', '$location', 'authService', 'userService', 'SweetAlert', 'store', 'storeService', '$rootScope', 'cardList',
        function($scope, $routeParams, $location, authService, userService, SweetAlert, store, storeService, $rootScope, cardList) {

            $scope.oneAtATime = false;

            $scope.storeName = $routeParams.id;

            // console.log('CARD LISGT', cardList);

            $scope.priceRange = {
                from: 0,
                to: 20
            };

            // $scope.maxPrice = 120;

            $scope.cards = cardList;

            var minD = 10000000000;
            var maxD = 0;
            angular.forEach($scope.cards, function(s) {

                // console.log(s);
                if (minD > s.value) {
                    minD = s.value;
                }

                if (maxD < s.value) {
                    maxD = s.value;
                }
            });


            var minValue = parseInt(minD);
            var maxValue = parseInt(maxD);

            // console.log('SCOPE', $scope);

            $scope.priceRange = {
                from: minValue,
                to: maxValue
            };

            $scope.maxPrice = maxValue;
            $scope.minPrice = minValue;

            console.log('max value', $scope.maxPrice);
            console.log('min value', $scope.minPrice);

            // $scope.maxPrice = maxValue;

            $scope.addToCart = function(card) {
                console.log('Add new item to cart', card);



                var currentCart = store.get('cart');

                // console.log("BEFORE", currentCart);
                if (currentCart) {

                    // check if the card is duplicated
                    var exist = false;
                    for (var i = currentCart.length - 1; i >= 0; i = i - 1) {
                        if ((currentCart[i].name === card.name) && (currentCart[i].pay === card.pay) && (currentCart[i].value === card.value)) {
                            exist = true;
                        }
                    }
                    if (exist === false) {
                        currentCart.push(angular.copy(card));
                        // console.log("current card", currentCart);
                        store.set('cart', currentCart);
                        $rootScope.$broadcast('CHANGE_CART', card);
                    }

                } else {

                    store.set('cart', [angular.copy(card)]);
                    $rootScope.$broadcast('CHANGE_CART', card);
                }
            };






        }
    ]);

};
},{}],17:[function(require,module,exports){
'use strict';
module.exports = function(m) {
    m.controller('StoreListController', ['$scope', '$location', '$routeParams', 'authService', 'storeService', 'storeList',

        function($scope, $location, $routeParams, authService, storeService, storeList) {

            $scope.oneAtATime = false;

            $scope.bCount = 0;
            $scope.cCount = 0;
            $scope.eCount = 0;
            $scope.fCount = 0;
            $scope.hCount = 0;

            $scope.totalStores = 0;


            $scope.stores = storeList;

            // min max discount
            var minD = 100;
            var maxD = 0;
            angular.forEach($scope.stores, function(s) {
                if (s.category === 'B') {
                    $scope.bCount += 1;
                }
                if (s.category === 'C') {
                    $scope.cCount += 1;
                }
                if (s.category === 'E') {
                    $scope.eCount += 1;
                }
                if (s.category === 'F') {
                    $scope.fCount += 1;
                }
                if (s.category === 'H') {
                    $scope.hCount += 1;
                }

                if (minD > s.discount) {
                    minD = s.discount;
                }

                if (maxD < s.discount) {
                    maxD = s.discount;
                }
            });

            $scope.totalStores = $scope.stores;

            var minDiscount = parseInt(minD);
            var maxDiscount = parseInt(maxD);

            // console.log('SCOPE', $scope);

            $scope.discount = {
                from: minDiscount,
                to: maxDiscount
            };


            $scope.minDiscount = minDiscount;
            $scope.maxDiscount = maxDiscount;


            $scope.categoryIncludes = [];

            $scope.includeCategory = function(category) {


                var i = $.inArray(category, $scope.categoryIncludes);
                if (i > -1) {
                    $scope.categoryIncludes.splice(i, 1);
                } else {
                    $scope.categoryIncludes.push(category);
                }


            };

            $scope.categoryFilter = function(store) {
                if ($scope.categoryIncludes.length > 0) {
                    if ($.inArray(store.category, $scope.categoryIncludes) < 0)
                        return;
                }

                return store;
            };





        }
    ]);
};
},{}],18:[function(require,module,exports){
'use strict';
var m = angular.module('ht.directives', []);


// controllers
require('./lib/route-loader')(m);




module.exports = m;
},{"./lib/route-loader":19}],19:[function(require,module,exports){
'use strict';
module.exports = function(m) {
    m.directive('routeLoader', function() {
        return {
            restrict: 'EA',
            link: function(scope, element) {
                // Store original display mode of element
                var shownType = element.css('display');

                function hideElement() {
                    element.css('display', 'none');
                }

                scope.$on('$routeChangeStart', function() {
                    element.css('display', shownType);
                });
                scope.$on('$routeChangeSuccess', hideElement);
                scope.$on('$routeChangeError', hideElement);
                // Initially element is hidden
                hideElement();
            }
        };
    });
};
},{}],20:[function(require,module,exports){
'use strict';
var m = angular.module('ht.filters', []);


// controllers
require('./lib/title-case')(m);
require('./lib/discount')(m);
require('./lib/value')(m);


module.exports = m;
},{"./lib/discount":21,"./lib/title-case":22,"./lib/value":23}],21:[function(require,module,exports){
'use strict';
module.exports = function(m) {
    m.filter('discount', function() {
        return function(stores, minD, maxD) {
            // console.log("FILTER STORE", minD, maxD);
            var filteredStores = [];

            for (var i = 0; i < stores.length; i = i + 1) {
                var store = stores[i];

                if (minD <= store.discount && store.discount <= maxD) {
                    filteredStores.push(store);
                }
            }

            return filteredStores;
        };
    });
};
},{}],22:[function(require,module,exports){
'use strict';
module.exports = function(m) {
    m.filter('titlecase', function() {
        return function(input) {
            var smallWords = /^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;

            input = input.toLowerCase();
            return input.replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g, function(match, index, title) {
                if (index > 0 && index + match.length !== title.length &&
                    match.search(smallWords) > -1 && title.charAt(index - 2) !== ':' &&
                    (title.charAt(index + match.length) !== ' - ' || title.charAt(index - 1) === ' - ') &&
                    title.charAt(index - 1).search(/[^\s-]/) < 0) {
                    return match.toLowerCase();
                }

                if (match.substr(1).search(/[A-Z]|\../) > -1) {
                    return match;
                }

                return match.charAt(0).toUpperCase() + match.substr(1);
            });
        };
    });
};
},{}],23:[function(require,module,exports){
'use strict';
module.exports = function(m) {
    m.filter('cardvalue', function() {
        return function(cards, minD, maxD) {
            // console.log("FILTER STORE", minD, maxD);
            var filteredCards = [];

            for (var i = 0; i < cards.length; i = i + 1) {
                var store = cards[i];

                if (minD <= store.value && store.value <= maxD) {
                    filteredCards.push(store);
                }
            }

            return filteredCards;
        };
    });
};
},{}],24:[function(require,module,exports){
'use strict';
var m = angular.module('ht.services', []);


// factories
require('./lib/store')(m);
require('./lib/user')(m);
require('./lib/auth')(m);
require('./lib/order')(m);



module.exports = m;
},{"./lib/auth":25,"./lib/order":26,"./lib/store":27,"./lib/user":28}],25:[function(require,module,exports){
'use strict';


module.exports = function(m) {

    m.factory('authService', ['store', '$location', 'userService', '$modal', '$http',
        function(store, $location, userService, $modal, $http) {



            var login = function(callback) {

            };


            // 
            var logout = function(callback) {

            };

            var auth = function() {

            };

            var isAuthenticated = function() {

                console.log('CURRENT LOGGINED USER', store.get('user'));
                if (store.get('user')) {
                    return true;
                } else {
                    return false;
                }
            };



            return {
                'login': login,
                'logout': logout,
                'auth': auth,
                'isAuthenticated': isAuthenticated
            };
        }
    ]);
};
},{}],26:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.factory('orderService', ['$resource',
        function($resource) {

            return $resource('/api/orders/:id', null, {
                'get': {
                    method: 'GET',
                    'url': '/api/orders/:id'
                }

            });
        }
    ]);
};
},{}],27:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.factory('storeService', ['$resource',
        function($resource) {

            return $resource('/api/stores/:id', null, {
                'featured': {
                    method: 'GET',
                    'url': '/api/stores/featured',
                    isArray: true
                },
                'bestSelling': {
                    method: 'GET',
                    'url': '/api/stores/best-selling',
                    isArray: true
                },
                'get': {
                    method: 'GET',
                    'url': '/api/stores/:id',
                    isArray: true
                }
            });
        }
    ]);
};
},{}],28:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.factory('userService', ['$resource',
        function($resource) {

            return $resource('/api/users/:id', null, {
                'update': {
                    method: 'PUT'
                },
                'login': {
                    method: 'POST',
                    'url': '/api/users/login',
                },
                'get': {
                    method: 'GET'
                },
                'forgetPassword': {
                    method: 'POST',
                    'url': '/api/users/forget-password',
                },
                'resetPassword': {
                    method: 'POST',
                    'url': '/api/users/reset-password',
                },
                'pay': {
                    method: 'POST',
                    'url': '/api/users/pay-order',
                },
                'getOrdersByUserId': {
                    method: 'GET',
                    'url': '/api/users/orders/:id',
                    isArray: true
                },
            });
        }
    ]);
};
},{}]},{},[1]);
