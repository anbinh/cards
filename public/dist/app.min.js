(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

require('./services');
require('./filters');
require('./directives');
require('./controllers');

// app.js
angular.module('app', [
    'ht.services',
    'ht.directives',
    'ht.filters',
    'ht.controllers',
    'ht.templates',
    'ngRoute',
    'ngResource',
    'angular-storage',
    'oitozero.ngSweetAlert',
    'ui.bootstrap',
    'nouislider'
]);
},{"./controllers":2,"./directives":34,"./filters":36,"./services":40}],2:[function(require,module,exports){
'use strict';
var m = angular.module('ht.controllers', []);


// controllers
require('./lib/home')(m);
require('./lib/store-list')(m);
require('./lib/sell-cards')(m);
require('./lib/sell-cards-card-info')(m);
require('./lib/sell-cards-customer-info')(m);
require('./lib/sell-cards-receipt')(m);

require('./lib/checkout')(m);
require('./lib/review_order')(m);
require('./lib/login')(m);
require('./lib/register')(m);
require('./lib/profile')(m);
require('./lib/profile-edit')(m);
require('./lib/profile-order-list')(m);
require('./lib/profile-order-detail')(m);
require('./lib/profile-sold-cards-list')(m);
require('./lib/profile-sold-cards-details')(m);
require('./lib/forget-password')(m);
require('./lib/reset-password')(m);
require('./lib/shopping-cart')(m);
require('./lib/store-detail')(m);
require('./lib/header')(m);

require('./lib/admin/index')(m);
require('./lib/admin/users')(m);
require('./lib/admin/guests')(m);
require('./lib/admin/dealers')(m);
require('./lib/admin/inventory')(m);
require('./lib/admin/sold-cards')(m);
require('./lib/admin/bought-cards')(m);
require('./lib/admin/sidebar')(m);
require('./lib/admin/sold-cards-detail')(m);
require('./lib/admin/bought-cards-detail')(m);

module.exports = m;
},{"./lib/admin/bought-cards":4,"./lib/admin/bought-cards-detail":3,"./lib/admin/dealers":5,"./lib/admin/guests":6,"./lib/admin/index":7,"./lib/admin/inventory":8,"./lib/admin/sidebar":9,"./lib/admin/sold-cards":11,"./lib/admin/sold-cards-detail":10,"./lib/admin/users":12,"./lib/checkout":13,"./lib/forget-password":14,"./lib/header":15,"./lib/home":16,"./lib/login":17,"./lib/profile":23,"./lib/profile-edit":18,"./lib/profile-order-detail":19,"./lib/profile-order-list":20,"./lib/profile-sold-cards-details":21,"./lib/profile-sold-cards-list":22,"./lib/register":24,"./lib/reset-password":25,"./lib/review_order":26,"./lib/sell-cards":30,"./lib/sell-cards-card-info":27,"./lib/sell-cards-customer-info":28,"./lib/sell-cards-receipt":29,"./lib/shopping-cart":31,"./lib/store-detail":32,"./lib/store-list":33}],3:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('AdminBoughtCardsDetailController', function($scope, $rootScope, store, $location, storeService, authService, $timeout, ReceiptDetail) {




        $rootScope.$broadcast('CHANGE_SIDEBAR_ITEM', 'cards', 'bought_cards');

        console.log(ReceiptDetail);

        $scope.receipt = ReceiptDetail;

        if ($scope.receipt.billingUser.id === 0) {
            $scope.receipt.billingUser.role = 'Guest';
            $scope.receipt.billingUser.className = 'label-warning';
        } else {
            if ($scope.receipt.billingUser.role === '' || $scope.receipt.billingUser.role === undefined) {
                $scope.receipt.billingUser.role = 'Regular User';
                $scope.receipt.billingUser.className = 'label-primary';
            } else {
                if ($scope.receipt.billingUser.role === 'user') {
                    $scope.receipt.billingUser.role = 'Regular User';
                    $scope.receipt.billingUser.className = 'label-primary';
                } else {
                    if ($scope.receipt.billingUser.role === 'dealer') {
                        $scope.receipt.billingUser.role = 'Dealer';
                        $scope.receipt.billingUser.className = 'label-success';
                    }
                }
            }
        }




        $timeout(function() {
            $('#datatable-default').dataTable();
        });
    });
};
},{}],4:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('AdminBoughtCardsController', function($scope, $rootScope, store, $location, storeService, authService, $timeout, Receipts) {




        $rootScope.$broadcast('CHANGE_SIDEBAR_ITEM', 'cards', 'bought_cards');

        console.log(Receipts);

        $scope.receipts = Receipts;

        for (var i = 0; i < $scope.receipts.length; i = i + 1) {
            if ($scope.receipts[i].billingUser.id === 0) {
                $scope.receipts[i].billingUser.role = 'Guest';
                $scope.receipts[i].billingUser.className = 'label-warning';
            } else {
                if ($scope.receipts[i].billingUser.role === '' || $scope.receipts[i].billingUser.role === undefined) {
                    $scope.receipts[i].billingUser.role = 'User';
                    $scope.receipts[i].billingUser.className = 'label-primary';
                } else {
                    if ($scope.receipts[i].billingUser.role === 'user') {
                        $scope.receipts[i].billingUser.role = 'User';
                        $scope.receipts[i].billingUser.className = 'label-primary';
                    } else {
                        if ($scope.receipts[i].billingUser.role === 'dealer') {
                            $scope.receipts[i].billingUser.role = 'Dealer';
                            $scope.receipts[i].billingUser.className = 'label-success';
                        }
                    }
                }
            }
        };

        $scope.goToReceiptDetail = function(id) {


            $location.url('cards_bought/' + id);
        }



        $timeout(function() {
            $('#datatable-default').dataTable();
        });
    });
};
},{}],5:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('AdminDealersController', function($scope, $rootScope, store, $location, storeService, authService, $timeout, DealerList) {


        $rootScope.$broadcast('CHANGE_SIDEBAR_ITEM', 'customers', 'dealers');

        console.log(DealerList);

        $scope.dealers = DealerList;


        $timeout(function() {
            $('#datatable-default').dataTable();
        });

    });
};
},{}],6:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('AdminGuestsController', function($scope, $rootScope, store, $location, storeService, authService, $timeout) {


        $rootScope.$broadcast('CHANGE_SIDEBAR_ITEM', 'customers', 'guests');

        $scope.users = [];

        var user = {
            first_name: 'ho',
            last_name: 'thai',
            email: 'tinhoc@outlook.com',
            address: '80 sentinel',
            city: 'Tonroto',
            state: 'Ontario',
            created_date: new Date()
        };

        var users = [];
        for (var i = 0; i < 100; i = i + 1) {
            var myUser = JSON.parse(JSON.stringify(user));
            myUser.last_name += (Math.random() * 100 | 0);
            users.push(myUser);
        }

        $scope.users = users;

        $timeout(function() {
            $('#datatable-default').dataTable();
        });
    });
};
},{}],7:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('AdminIndexController', function($scope, $rootScope, store, $location, storeService, authService) {

        $rootScope.$broadcast('CHANGE_SIDEBAR_ITEM', 'dashboard', '');

    });
};
},{}],8:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('AdminInventoryController', function($scope, $rootScope, store, $location, storeService, authService, $timeout) {




        $rootScope.$broadcast('CHANGE_SIDEBAR_ITEM', 'inventory', '');

        $scope.cards = [];

        var cards = [];
        for (var i = 0; i < 100; i = i + 1) {

            var card = {
                value: Math.random() * 1000000 | 0,
                number: Math.random() * 1000000 | 0,
                pin: Math.random() * 1000000 | 0,
                amount: Math.random() * 1000 | 0,
                dealer_code: Math.random() * 1000000 | 0,
                sold_to: 'tinhoc@outlook.com',
                created_date: new Date()
            };
            cards.push(card);
        }

        $scope.cards = cards;

        $timeout(function() {
            $('#datatable-default').dataTable();
        });

    });
};
},{}],9:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('AdminSideBarController', function($scope, $rootScope, store, $location, storeService, authService) {

        $scope.currentActiveParent = 'dashboard';
        $scope.currentActiveChild = '';
        $rootScope.$on('CHANGE_SIDEBAR_ITEM', function(event, parent, child) {
            console.log('parent child', parent, child);
            $scope.currentActiveParent = parent;
            $scope.currentActiveChild = child;
        })




    });
};
},{}],10:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('AdminSoldCardsDetailController', function($scope, $rootScope, store, $location, storeService, authService, $timeout, OrderDetail) {

        $rootScope.$broadcast('CHANGE_SIDEBAR_ITEM', 'cards', 'sold_cards');


        console.log(OrderDetail);

        $scope.order = OrderDetail;

        if ($scope.order.billingUser.id === 0) {
            $scope.order.billingUser.role = 'Guest';
            $scope.order.billingUser.className = 'label-warning';
        } else {
            if ($scope.order.billingUser.role === '' || $scope.order.billingUser.role === undefined) {
                $scope.order.billingUser.role = 'Regular User';
                $scope.order.billingUser.className = 'label-primary';
            } else {
                if ($scope.order.billingUser.role === 'user') {
                    $scope.order.billingUser.role = 'Regular User';
                    $scope.order.billingUser.className = 'label-primary';
                }
            }
        }

        $timeout(function() {
            $('#datatable-default').dataTable();
        });

    });
};
},{}],11:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('AdminSoldCardsController', function($scope, $rootScope, store, $location, storeService, authService, $timeout, Orders) {



        $rootScope.$broadcast('CHANGE_SIDEBAR_ITEM', 'cards', 'sold_cards');

        $scope.orders = Orders;

        for (var i = 0; i < $scope.orders.length; i = i + 1) {
            if ($scope.orders[i].billingUser.id === 0) {
                $scope.orders[i].billingUser.role = 'Guest';
                $scope.orders[i].billingUser.className = 'label-warning';
            } else {
                if ($scope.orders[i].billingUser.role === '' || $scope.orders[i].billingUser.role === undefined) {
                    $scope.orders[i].billingUser.role = 'User';
                    $scope.orders[i].billingUser.className = 'label-primary';
                } else {
                    if ($scope.orders[i].billingUser.role === 'user') {
                        $scope.orders[i].billingUser.role = 'User';
                        $scope.orders[i].billingUser.className = 'label-primary';
                    }
                }
            }
        };

        $scope.orderDetail = function(id) {
            $location.url('cards_sold/' + id);
        };

        $timeout(function() {
            $('#datatable-default').dataTable();
        });

    });
};
},{}],12:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('AdminUsersController', function($scope, $rootScope, store, $location, storeService, authService, $timeout, UserList) {



        $rootScope.$broadcast('CHANGE_SIDEBAR_ITEM', 'customers', 'users');

        console.log(UserList);

        $scope.users = UserList;


        $timeout(function() {
            $('#datatable-default').dataTable();
        });
    });
};
},{}],13:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('CheckoutController', ['$scope', '$location', '$routeParams', 'authService', 'store',
        function($scope, $location, $routeParams, authService, store) {

            $scope.selectedCards = store.get('cart');


            if (!authService.isAuthenticated()) {
                $scope.isGuest = true;
                $scope.user = {
                    id: 0 // guest id set to 0
                };
            } else {
                $scope.isGuest = false;
                $scope.user = store.get('user');
            }





            // Calculate cards' stats
            var total = 0;
            var totalFaceValue = 0;
            var totalPercentage = 0;

            for (var i = 0; i < $scope.selectedCards.length; i = i + 1) {
                var card = $scope.selectedCards[i];
                total += card.pay;
                totalFaceValue += card.value;
                totalPercentage += (card.pay / card.value * 100);
            }
            $scope.total = total;
            $scope.totalFaceValue = totalFaceValue;
            $scope.averagePercentage = 100 - totalPercentage / $scope.selectedCards.length;


            $scope.placeOrder = function() {

                if ($scope.agreed === false) {
                    swal('Warning', 'You have to agree the terms and conditions', 'warnning');
                    return;
                }

                var order = {
                    billingUser: $scope.user,
                    cards: $scope.selectedCards,
                };

                // console.log('this order', order);

                store.set('order', order);

                window.location = '/checkout/#/review_order';
            };
        }
    ]);
};
},{}],14:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ForgetPasswordController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {

            $scope.forgetPassword = function() {

                userService.forgetPassword({
                    email: $scope.email
                }, function(ret) {
                    console.log(ret);
                    $scope.email = '';
                    swal({
                        title: 'Done',
                        text: 'An email to reset your password has been sent to your email',
                        type: 'success',
                        showCancelButton: true,
                        confirmButtonText: 'Go To Homepage',
                        closeOnConfirm: false,
                        confirmButtonColor: '#08C',
                    }, function() {
                        window.location = '/';
                    });
                }, function(err) {
                    swal('Error', err.data.message, 'error');
                });
            };

        }
    ]);
};
},{}],15:[function(require,module,exports){
'use strict';

module.exports = function(m) {
    m.controller('HeaderController', ['$scope', '$rootScope', 'store', '$location', 'authService', '$routeParams', 'storeService',
        function($scope, $rootScope, store, $location, authService, $routeParams, storeService) {


            console.log('HEADER Route PARAM', $routeParams);

            function capitalizeFirstLetter(str) {
                return str.replace(/\w\S*/g, function(txt) {
                    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                });
            }

            var getTotal = function(cards) {
                var total = 0;
                for (var i = cards.length - 1; i >= 0; i = i - 1) {
                    total += cards[i].pay;
                }
                // return total;

                return Math.round(total * 100) / 100;
            };

            var m, n;

            storeService.get().$promise.then(function(stores) {
                $scope.allStores = stores;
                for (var i = 0; i < $scope.allStores.length; i = i + 1) {
                    $scope.allStores[i].originalName = $scope.allStores[i].name;
                    $scope.allStores[i].name = capitalizeFirstLetter($scope.allStores[i].name.split('-').join(' '));
                }

            });


            if (authService.isAuthenticated()) {
                $scope.loggedIn = true;
            } else {
                $scope.loggedIn = false;
            }

            $scope.showCheckout = false;

            // store.set("cart", []);
            $scope.selectedCards = [];
            var tmp = store.get('cart');
            if (tmp) {
                console.log(tmp);
                $scope.selectedCards = tmp;
                m = getTotal($scope.selectedCards);
                n = $scope.selectedCards.length;
                $scope.cartStat = 'Cart (' + n + ') - $ ' + m;

                if (n > 0) {
                    $scope.showCheckout = true;
                }
            }



            $rootScope.$on('CHANGE_CART', function() {
                $scope.selectedCards = store.get('cart');
                m = getTotal($scope.selectedCards);
                n = $scope.selectedCards.length;
                $scope.cartStat = 'Cart (' + n + ') - $' + m;

                if (n > 0) {
                    $scope.showCheckout = true;
                }

            });

            $scope.removeCard = function(index) {
                var cards = store.get('cart');
                cards.splice(index, 1);

                store.set('cart', cards);
                $scope.selectedCards = store.get('cart');
                m = getTotal($scope.selectedCards);
                n = $scope.selectedCards.length;
                $scope.cartStat = 'Cart (' + n + ') - $' + m;

            };

            $scope.viewShoppingCart = function() {
                window.location = '/shopping-cart/#/';
            };
            $scope.checkout = function() {
                var forwardUrl = btoa(window.location.origin + '/checkout');
                var loginURL = '/login/#/?forward_url=' + forwardUrl;

                // if user has not loggined yet
                if (!store.get('user')) {
                    swal({
                        title: 'Notice',
                        text: 'You can login before going to the next step <a href="' + loginURL + '">LOGIN NOW</a>  </br> Or you can continue to use the site as a guest',
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Continue as guest',
                        closeOnConfirm: false,
                        confirmButtonColor: '#08C',
                        html: true
                    }, function() {
                        window.location = window.location.origin + '/checkout/#/?guest=true';
                        swal.close();
                    });
                } else {
                    window.location = '/checkout';
                }
            };

            $scope.signOut = function() {
                store.remove('user');
                window.location = '/';
            };

            $scope.searchStore = function() {
                if ($scope.searchedStore.originalName) {
                    window.location = '/stores/#/' + $scope.searchedStore.originalName;
                } else {
                    swal('Invalid Store', 'The store you are looking is not available', 'error');
                }
            };
        }
    ]);

};
},{}],16:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('HomeController', function($scope, store, $location, storeService, authService) {

        $scope.auth = authService.auth();

        // alert("HOME Controller");
        console.log('HOME CONTROLLER', storeService);

        $scope.featuredstoreService = storeService.featured();

        $scope.highestPayouts = storeService.highestPayout();

        $scope.login = function() {

        };

        $scope.logout = function() {

        };





        $scope.search = function() {
            window.location = '/search/#/?q=' + $scope.query;
        };

        $scope.go = function(path) {
            window.location = path;
        };




    });
};
},{}],17:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('LoginController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService', 'isDealer',
        function($scope, $location, $routeParams, authService, store, userService, isDealer) {

            console.log('LOGIN', $routeParams);

            $scope.isDealer = isDealer;

            $scope.login = function() {
                userService.login($scope.user, function(ret) {


                    // if ((ret.role === 'dealer') && ($scope.isDealer === false)) {
                    //     swal('Error!', 'This login panel is for normal users', 'error');
                    //     return;
                    // }

                    // if ((ret.role === 'user') && ($scope.isDealer === true)) {
                    //     swal('Error!', 'This login panel is for dealers', 'error');
                    //     return;
                    // }


                    console.log(ret);
                    store.set('user', ret);


                    if ($routeParams.forward_url !== '' && $routeParams.forward_url !== undefined) {
                        console.log('$routeParams.forward_url', atob($routeParams.forward_url));
                        window.location = atob($routeParams.forward_url);
                    } else {
                        window.location = '/profile/';
                    }

                }, function(err) {
                    swal('Error', err.data.message, 'error');
                });
            };
        }
    ]);
};
},{}],18:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ProfileEditController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {

            if (!authService.isAuthenticated()) {
                window.location = '/unauthorized/';
            }

            $scope.user = store.get('user');
            console.log($scope.user, 'edit user');

            $scope.update = function() {
                console.log('user', $scope.user);

                userService.update({
                    id: $scope.user.id
                }, $scope.user, function(ret) {
                    console.log('USER HAS BEEN UPDATED', ret);
                    store.set('user', ret);

                    window.location = '/profile/';

                }, function(err) {
                    swal('Error', err.data.message, 'error');
                });
            };
        }
    ]);
};
},{}],19:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ProfileOrderDetailController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService', 'orderService',
        function($scope, $location, $routeParams, authService, store, userService, orderService) {

            if (!authService.isAuthenticated()) {
                window.location = '/unauthorized/';
            }

            $scope.order = orderService.get({
                id: $routeParams.id
            }, function(order) {
                // Calculate cards' stats
                var total = 0;
                var totalFaceValue = 0;
                var totalPercentage = 0;

                for (var i = 0; i < $scope.order.cards.length; i = i + 1) {
                    var card = $scope.order.cards[i];
                    total += card.pay;
                    totalFaceValue += card.value;
                    totalPercentage += (card.pay / card.value * 100);
                }
                $scope.total = total;
                $scope.totalFaceValue = totalFaceValue;
                $scope.averagePercentage = 100 - totalPercentage / $scope.order.cards.length;

            });
        }
    ]);
};
},{}],20:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ProfileOrderListController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {

            if (!authService.isAuthenticated()) {
                window.location = '/unauthorized/';
            }

            var user = store.get('user');

            $scope.orders = userService.getOrdersByUserId({
                id: user.id,
            }, function(ret) {
                // console.log('RET', ret);
            }, function(err) {
                swal('Error', err.data.message, 'error');
            });


            $scope.orderDetail = function(id) {
                window.location = '/profile/#/orders/' + id;
            };
        }
    ]);
};
},{}],21:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('SoldCardDetailController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService', 'SoldCardList',
        function($scope, $location, $routeParams, authService, store, userService, SoldCardList) {

            if (!authService.isAuthenticated()) {
                window.location = '/';
            } else {
                $scope.user = store.get('user');
            }

            if ($scope.user.role === 'dealer') {
                $scope.isDealer = true;
            } else {
                $scope.isDealer = false;
            }



            $scope.sellingCards = SoldCardList;

            // console.log('elling cards', $scope.sellingCards);

            $scope.total = $scope.sellingCards.total_amount;

            $scope.totalFaceValue = $scope.sellingCards.total_face_value;

            $scope.averagePayout = $scope.sellingCards.average_payout;


        }
    ]);
};
},{}],22:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('SoldCardListListController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService', 'SoldCardsList',
        function($scope, $location, $routeParams, authService, store, userService, SoldCardsList) {

            if (!authService.isAuthenticated()) {
                window.location = '/unauthorized/';
            }

            // var user = store.get('user');

            $scope.soldCardsList = SoldCardsList;


            $scope.soldCardsDetail = function(id) {
                window.location = '/profile/#/sold-cards/' + id;
            };




            for (var i = 0; i < $scope.soldCardsList.length; i = i + 1) {

                var slides = [];
                var storeList = $scope.soldCardsList[i].store_list.split(',');

                console.log('store', storeList);
                for (var j = 0; j < storeList.length; j = j + 1) {

                    slides.push({
                        image: storeList[i],
                        text: ''
                    });

                }
                $scope.soldCardsList[i].slides = slides;

            }


        }
    ]);
};
},{}],23:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ProfileController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {

            if (!authService.isAuthenticated()) {
                window.location = '/unauthorized/';
            }

            $scope.user = store.get('user');

            if ($scope.user.role === 'dealer') {
                $scope.isDealer = true;
            } else {
                $scope.isDealer = false;
            }



        }
    ]);
};
},{}],24:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('RegisterController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService', 'isDealer',
        function($scope, $location, $routeParams, authService, store, userService, isDealer) {


            $scope.isDealer = isDealer;

            $scope.signUp = function() {
                console.log('NEW USER', $scope.user);

                var user = angular.copy($scope.user);

                var UserService = userService;

                if (user.password !== user.password2) {
                    swal('Error!', 'Your password does not match', 'error');
                    return;
                }

                delete user.password2;

                if (isDealer === true) {
                    user.role = 'dealer';
                }

                var us = new UserService(user);
                us.$save(function(result) {
                    store.set('user', result);

                    window.location = '/profile';


                }, function(err) {
                    // console.log("ERRR", err);
                    swal('Error', err.data.message, 'error');
                });
            };
        }
    ]);
};
},{}],25:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ResetPasswordController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {



            $scope.resetPassword = function() {
                if ($scope.password !== $scope.password2) {
                    swal('Error!', 'Your password does not match', 'error');
                    return;
                }


                userService.resetPassword({
                    token: $routeParams.token,
                    password: $scope.password
                }, function(ret) {
                    console.log(ret);

                    $scope.password = '';
                    $scope.password2 = '';
                    swal({
                        title: 'Done',
                        text: 'Your password has been reset',
                        type: 'success',
                        showCancelButton: true,
                        confirmButtonText: 'Login',
                        closeOnConfirm: false,
                        confirmButtonColor: '#08C',
                    }, function() {
                        window.location = '/login/';
                    });

                }, function(err) {
                    swal('Error', err.data.message, 'error');
                });
            };

        }
    ]);
};
},{}],26:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ReviewOrderController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService', '$rootScope',
        function($scope, $location, $routeParams, authService, store, userService, $rootScope) {


            if (!authService.isAuthenticated()) {
                $scope.isGuest = true;
                $scope.user = {
                    id: 0 // guest id set to 0
                };
            } else {
                $scope.isGuest = false;
                $scope.user = store.get('user');
            }

            $scope.isPaid = false;



            $scope.order = store.get('order');

            if ($scope.order && $scope.order.cards === undefined) {
                alert('invalid page');

                window.location = '/';

                return;
            }



            console.log('order', $scope.order);


            // Calculate cards' stats
            var total = 0;
            var totalFaceValue = 0;
            var totalPercentage = 0;

            for (var i = 0; i < $scope.order.cards.length; i = i + 1) {
                var card = $scope.order.cards[i];
                total += card.pay;
                totalFaceValue += card.value;
                totalPercentage += (card.pay / card.value * 100);
            }
            $scope.total = total;
            $scope.totalFaceValue = totalFaceValue;
            $scope.averagePercentage = 100 - totalPercentage / $scope.order.cards.length;



            $scope.pay = function() {
                var order = {
                    user_id: $scope.user.id,
                    billing_user: $scope.order.billingUser,
                    cards: $scope.order.cards,
                    total_amount: total,
                    total_cards: $scope.order.cards.length,
                    total_face_value: $scope.totalFaceValue,
                    average_percentage: $scope.averagePercentage
                };

                console.log('order', order);



                userService.pay(order, function(result) {
                    // 
                    console.log('PAYMENT', result);
                    store.set('cart', []);

                    store.set('order', {});

                    if (!$scope.isGuest) {
                        window.location = '/profile/#/orders/' + result.id;
                    } else {
                        $scope.isPaid = true;
                        swal('Congratulations!', 'Your Order has been paid', 'success');
                        $rootScope.$broadcast('CHANGE_CART', {});
                    }


                }, function(err) {
                    // console.log("ERRR", err);
                    swal('Error', err.data.message, 'error');
                });
            };

        }
    ]);
};
},{}],27:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('SellCardInfoController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService',
        function($scope, $location, $routeParams, authService, store, userService) {

            if (!authService.isAuthenticated()) {
                window.location = '/';
            } else {
                $scope.user = store.get('user');
            }

            if ($scope.user.role === 'dealer') {
                $scope.isDealer = true;
            } else {
                $scope.isDealer = false;
            }

            if (!store.get('selling_cards')) {

                var allCards = [];
                $scope.stores = store.get('selling_stores');
                for (var i = 0; i < $scope.stores.length; i = i + 1) {
                    var currentStore = $scope.stores[i];

                    // console.log('current store', currentStore);
                    for (var j = 0; j < currentStore.amount; j = j + 1) {
                        var card = {
                            gogo_buy: currentStore.gogo_buy,
                            store_name: currentStore.originalName,
                            store_id: currentStore.id,
                            value: currentStore.value,
                            amount: 1
                        };

                        allCards.push(card);
                    }
                }
                $scope.allSellingCards = allCards;
            } else {
                $scope.allSellingCards = store.get('selling_cards');
            }



            // console.log('selling stores', store.get('selling_cards'));
            $scope.goBack = function() {

                $location.url('');
            };

            $scope.goNext = function() {
                console.log('current selling cards', $scope.allSellingCards);

                store.set('selling_cards', angular.copy($scope.allSellingCards));

                var forwardUrl = btoa(window.location.origin + '/sell-cards/#/customer-info');
                var loginURL = '/login/#/?forward_url=' + forwardUrl;

                // if user has not loggined yet
                if (!store.get('user')) {
                    swal({
                        title: 'Notice',
                        text: 'You can login before going to the next step <a href="' + loginURL + '">LOGIN NOW</a>  </br> Or you can continue to use the site as a guest',
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Continue as guest',
                        closeOnConfirm: false,
                        confirmButtonColor: '#08C',
                        html: true
                    }, function() {
                        window.location = window.location.origin + '/sell-cards/#/customer-info?guest=true';
                        swal.close();
                    });
                } else {
                    window.location = window.location.origin + '/sell-cards/#/customer-info';
                }
            };
        }
    ]);
};
},{}],28:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('SellCardCustomerInfoController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService', 'utilService',
        function($scope, $location, $routeParams, authService, store, userService, utilService) {

            var guest;

            if ($routeParams.guest === 'true') {
                $scope.isGuest = true;
                guest = {
                    id: 0
                };
            } else {
                $scope.isGuest = false;
            }


            if (!authService.isAuthenticated()) {
                window.location = '/';
            } else {
                $scope.user = store.get('user');
            }

            if ($scope.user.role === 'dealer') {
                $scope.isDealer = true;
            } else {
                $scope.isDealer = false;
            }




            $scope.sellingCards = {
                billingUser: ($scope.isGuest) ? guest : store.get('user'),
                cards: store.get('selling_cards')
            };



            console.log('selling cards', store.get('selling_cards'));

            console.log('ME XXXXXXX', $scope.sellingCards.cards[0].payBy);

            $scope.total = ($scope.sellingCards.cards[0].payBy === 'mail') ? utilService.totalOfferMailCard($scope.sellingCards.cards) : utilService.totalOfferOnline($scope.sellingCards.cards);

            $scope.totalFaceValue = utilService.totalFaceValue($scope.sellingCards.cards);

            $scope.averagePayout = $scope.total / $scope.totalFaceValue * 100;


            $scope.sellCards = function() {

                if ($scope.agreed === false) {
                    swal('Warning', 'You have to agree the terms and conditions', 'warnning');
                    return;
                }


                var user = ($scope.isGuest) ? guest : store.get('user');

                // find store list
                var store_list = [];

                for (var i = 0; i < $scope.sellingCards.cards.length; i = i + 1) {
                    var card = $scope.sellingCards.cards[i];
                    // console.log('card', card);


                    if (store_list.indexOf(card.store_name) === -1) {
                        store_list.push(card.store_name);
                    }
                }

                var bilingUser = $scope.sellingCards.billingUser;

                if (($scope.sellingCards.cards[0].payBy === 'online') && (bilingUser.email !== bilingUser.email2)) {
                    swal('Error!', 'Email does not match', 'error');
                    return;
                }

                if (($scope.sellingCards.cards[0].payBy === 'online') && (bilingUser.password !== bilingUser.password2)) {
                    swal('Error!', 'Password does not match', 'error');
                    return;
                }


                var selling_cards = {
                    user_id: user.id,
                    billing_user: $scope.sellingCards.billingUser,
                    cards: $scope.sellingCards.cards,
                    total_amount: $scope.total,
                    total_cards: $scope.sellingCards.cards.length,
                    total_face_value: $scope.totalFaceValue,
                    average_payout: $scope.averagePayout,
                    store_list: store_list.join(',')
                };

                console.log('YOUR SELLING CARDS', selling_cards);

                userService.sellCards(selling_cards, function(result) {

                    console.log(result);

                    store.set('selling_cards', []);
                    store.set('selling_stores', []);


                    if ($scope.isGuest) {
                        $location.url('receipt/' + result.id + '?guest=true');
                    } else {
                        $location.url('receipt/' + result.id);
                    }


                    console.log('RECEIPT', result);
                }, function(err) {
                    // console.log("ERRR", err);
                    swal('Error', err.data.message, 'error');
                });

            };

        }
    ]);
};
},{}],29:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('SellCardReceiptController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService', 'SellingCardList', 'utilService',
        function($scope, $location, $routeParams, authService, store, userService, SellingCardList, utilService) {

            var guest;

            if ($routeParams.guest === 'true') {
                $scope.isGuest = true;
                guest = {
                    id: 0
                };
            } else {
                $scope.isGuest = false;
            }



            $scope.sellingCards = SellingCardList;

            // console.log('elling cards', $scope.sellingCards);

            $scope.total = $scope.sellingCards.total_amount;

            $scope.totalFaceValue = $scope.sellingCards.total_face_value;

            $scope.averagePayout = $scope.sellingCards.average_payout;

            $scope.viewSellingHistory = function() {
                window.location = '/profile/#/sold-cards-history';
            };


        }
    ]);
};
},{}],30:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('SellCardController', ['$scope', '$location', '$routeParams', 'authService', 'store', 'userService', 'storeList', 'utilService',
        function($scope, $location, $routeParams, authService, store, userService, storeList, utilService) {




            console.log('util service', utilService);
            $scope.payBy = {
                mail: true,
                online: false
            };

            // init default values
            $scope.store = {
                balance: null,
                amount: 1,
                brand: null
            };

            // console.log('STORE LIST', storeList);

            $scope.storeSelected = undefined;
            $scope.allStores = storeList;

            for (var i = 0; i < $scope.allStores.length; i = i + 1) {
                $scope.allStores[i].originalName = $scope.allStores[i].name;
                $scope.allStores[i].name = utilService.titleCase($scope.allStores[i].name.split('-').join(' '));
            }


            $scope.$watch('payBy.mail', function() {
                if ($scope.payBy.mail === true) {
                    $scope.payBy.online = false;
                }
            });

            $scope.$watch('payBy.online', function() {
                if ($scope.payBy.online === true) {
                    $scope.payBy.mail = false;
                }
            });

            $scope.goToCardInfo = function() {
                $location.url('/card-info');
            };


            // check if there is any cards gonne sold
            if ((store.get('selling_stores') === null) || (store.get('selling_stores').length === 0)) {
                $scope.showIntruction = true;
                store.set('selling_stores', []);
            } else {
                $scope.showIntruction = false;
                $scope.stores = store.get('selling_stores');
                $scope.totalOfferMailCard = utilService.totalOfferMailCard($scope.stores);
                $scope.totalOfferOnline = utilService.totalOfferOnline($scope.stores);
            }

            // store.set('selling_stores', []);
            console.log('SELLING STORES', store.get('selling_stores'));




            $scope.addStore = function() {

                if (!$scope.store.brand.originalName) {
                    $scope.store = {
                        balance: null,
                        amount: 1,
                        brand: null
                    };
                    swal('Invalid Store', 'The store you entered is not valid', 'error');
                    return;
                }

                if (($scope.store.balance === undefined) || ($scope.store.balance === null)) {
                    swal('Invalid Balance', 'Please enter the card balance', 'error');
                    return;
                }

                if (($scope.store.amount === undefined) || ($scope.store.amount === null)) {
                    swal('Invalid Quantity', 'Please enter the quantity number', 'error');
                    return;
                }

                // remove selling_cards saving
                store.remove('selling_cards');
                console.log('store', $scope.store);
                $scope.showIntruction = false;

                var stores = store.get('selling_stores');
                var currentStore = {
                    value: parseInt($scope.store.balance),
                    amount: parseInt($scope.store.amount),
                    gogo_buy: $scope.store.brand.gogo_buy,
                    name: $scope.store.brand.name,
                    originalName: $scope.store.brand.originalName,
                    id: $scope.store.brand.id,
                    payBy: ($scope.payBy.mail === true) ? 'mail' : 'online'
                };

                $scope.store = {
                    balance: null,
                    amount: 1,
                    brand: null
                };

                stores.push(currentStore);


                $scope.totalOfferMailCard = utilService.totalOfferMailCard(stores);
                $scope.totalOfferOnline = utilService.totalOfferOnline(stores);

                $scope.stores = stores;
                store.set('selling_stores', stores);

                console.log('current store', currentStore);
            };

            $scope.removeStore = function(index) {
                store.remove('selling_cards');
                $scope.stores.splice(index, 1);
                store.set('selling_stores', $scope.stores);
                $scope.totalOfferMailCard = utilService.totalOfferMailCard($scope.stores);
                $scope.totalOfferOnline = utilService.totalOfferOnline($scope.stores);
            };

            $scope.mailBoxCLick = function() {
                if ($scope.payBy.mail === false) {
                    $scope.payBy.mail = !$scope.payBy.mail;
                    var currentStores = store.get('selling_stores');
                    for (var i = 0; i < currentStores.length; i = i + 1) {
                        currentStores[i].payBy = 'mail';
                    }

                    store.set('selling_stores', currentStores);
                }
            };

            $scope.onlineBoxCLick = function() {
                if ($scope.payBy.online === false) {
                    $scope.payBy.online = !$scope.payBy.online;

                    var currentStores = store.get('selling_stores');
                    for (var i = 0; i < currentStores.length; i = i + 1) {
                        currentStores[i].payBy = 'online';
                    }
                    store.set('selling_stores', currentStores);
                }
            };


        }
    ]);
};
},{}],31:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.controller('ShoppingCartController', ['$scope', '$location', '$routeParams', 'authService', 'store', '$rootScope',
        function($scope, $location, $routeParams, authService, store, $rootScope) {

            var getTotal = function(cards) {
                var total = 0;
                for (var i = cards.length - 1; i >= 0; i = i - 1) {
                    total += cards[i].pay;
                }
                // return total;

                return Math.round(total * 100) / 100;
            };

            $scope.selectedCards = store.get('cart');

            var total = 0;
            for (var i = $scope.selectedCards.length - 1; i >= 0; i = i - 1) {
                total += $scope.selectedCards[i].pay;
            }
            $scope.total = Math.round(total * 100) / 100;

            $scope.checkout = function() {


                var forwardUrl = btoa(window.location.origin + '/checkout');
                var loginURL = '/login/#/?forward_url=' + forwardUrl;

                // if user has not loggined yet
                if (!store.get('user')) {
                    swal({
                        title: 'Notice',
                        text: 'You can login before going to the next step <a href="' + loginURL + '">LOGIN NOW</a>  </br> Or you can continue to use the site as a guest',
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Continue as guest',
                        closeOnConfirm: false,
                        confirmButtonColor: '#08C',
                        html: true
                    }, function() {
                        window.location = window.location.origin + '/checkout/#/?guest=true';
                        swal.close();
                    });
                } else {
                    window.location = '/checkout';
                }

            };

            $scope.removeCard = function(index) {
                var cards = store.get('cart');
                cards.splice(index, 1);

                store.set('cart', cards);
                $scope.selectedCards = store.get('cart');

                $scope.total = getTotal($scope.selectedCards);

                $rootScope.$broadcast('CHANGE_CART');

            };

        }
    ]);

};
},{}],32:[function(require,module,exports){
'use strict';

module.exports = function(m) {
    m.controller('StoreDetailController', ['$scope', '$routeParams', '$location', 'authService', 'userService', 'SweetAlert', 'store', 'storeService', '$rootScope', 'cardList',
        function($scope, $routeParams, $location, authService, userService, SweetAlert, store, storeService, $rootScope, cardList) {

            $scope.oneAtATime = false;

            $scope.storeName = $routeParams.id;

            // console.log('CARD LISGT', cardList);

            $scope.priceRange = {
                from: 0,
                to: 20
            };

            // $scope.maxPrice = 120;

            $scope.cards = cardList;

            var minD, maxD;
            if ($scope.cards.length > 0) {
                minD = 10000000000;
                maxD = 0;
            } else {
                minD = 0;
                maxD = 100;
            }

            angular.forEach($scope.cards, function(s) {

                // console.log(s);
                if (minD > s.value) {
                    minD = s.value;
                }

                if (maxD < s.value) {
                    maxD = s.value;
                }
            });


            var minValue = parseInt(minD);
            var maxValue = parseInt(maxD);

            if (minValue === maxValue) {
                maxValue = minValue + 1;
            }

            // console.log('SCOPE', $scope);

            $scope.priceRange = {
                from: minValue,
                to: maxValue
            };

            $scope.maxPrice = maxValue;
            $scope.minPrice = minValue;

            console.log('max value', $scope.maxPrice);
            console.log('min value', $scope.minPrice);

            // $scope.maxPrice = maxValue;
            // 
            // 
            // check if card has been added
            var currentCart = store.get('cart');
            for (var j = 0; j < $scope.cards.length; j = j + 1) {
                for (var i = 0; i < currentCart.length; i = i + 1) {
                    console.log($scope.cards[j].id, currentCart[i].id);
                    if ($scope.cards[j].id === currentCart[i].id) {
                        $scope.cards[j].isAdded = true;
                    }

                }
            }


            $scope.addToCart = function(card, index) {
                console.log('Add new item to cart', card);



                var currentCart = store.get('cart');

                // console.log("BEFORE", currentCart);
                if (currentCart) {

                    // check if the card is duplicated
                    var exist = false;
                    for (var i = currentCart.length - 1; i >= 0; i = i - 1) {
                        if (currentCart[i].id === card.id) {
                            exist = true;
                        }
                    }
                    if (exist === false) {
                        $scope.cards[index].isAdded = true;
                        currentCart.push(angular.copy(card));
                        // console.log("current card", currentCart);
                        store.set('cart', currentCart);
                        $rootScope.$broadcast('CHANGE_CART', card);
                    }

                } else {

                    store.set('cart', [angular.copy(card)]);
                    $rootScope.$broadcast('CHANGE_CART', card);
                }

                // adding effect
                var cart = $('.shopping-cart');
                var effectClasses = 'animated tada';
                var imgtodrag = $('img.card_' + card.id);


                cart.removeClass(effectClasses);
                if (imgtodrag) {
                    var imgclone = imgtodrag.clone()
                        .offset({
                            top: imgtodrag.offset().top,
                            left: imgtodrag.offset().left
                        })
                        .css({
                            'opacity': '0.5',
                            'position': 'absolute',
                            'height': '60px',
                            'width': '100px',
                            'z-index': '2000'
                        })
                        .appendTo($('body'))
                        .animate({
                            'top': cart.offset().top + 10,
                            'left': cart.offset().left + 10,
                            'width': 50,
                            'height': 30
                        }, 1000, 'easeInOutExpo');

                    setTimeout(function() {
                        cart.addClass(effectClasses);
                    }, 1500);

                    imgclone.animate({
                        'width': 0,
                        'height': 0
                    }, function() {
                        $(this).detach();
                    });
                }

            };






        }
    ]);

};
},{}],33:[function(require,module,exports){
'use strict';
module.exports = function(m) {
    m.controller('StoreListController', ['$scope', '$location', '$routeParams', 'authService', 'storeService', 'storeList',

        function($scope, $location, $routeParams, authService, storeService, storeList) {

            $scope.oneAtATime = false;

            $scope.bCount = 0;
            $scope.cCount = 0;
            $scope.eCount = 0;
            $scope.fCount = 0;
            $scope.hCount = 0;

            $scope.totalStores = 0;


            $scope.stores = storeList;

            // min max discount
            var minD = 100;
            var maxD = 0;
            angular.forEach($scope.stores, function(s) {
                if (s.category === 'B') {
                    $scope.bCount += 1;
                }
                if (s.category === 'C') {
                    $scope.cCount += 1;
                }
                if (s.category === 'E') {
                    $scope.eCount += 1;
                }
                if (s.category === 'F') {
                    $scope.fCount += 1;
                }
                if (s.category === 'H') {
                    $scope.hCount += 1;
                }

                if (minD > s.discount) {
                    minD = s.discount;
                }

                if (maxD < s.discount) {
                    maxD = s.discount;
                }
            });

            $scope.totalStores = $scope.stores;

            var minDiscount = parseInt(minD);
            var maxDiscount = parseInt(maxD);

            // console.log('SCOPE', $scope);

            $scope.discount = {
                from: minDiscount,
                to: maxDiscount
            };


            $scope.minDiscount = minDiscount;
            $scope.maxDiscount = maxDiscount;


            $scope.categoryIncludes = [];

            $scope.includeCategory = function(category) {


                var i = $.inArray(category, $scope.categoryIncludes);
                if (i > -1) {
                    $scope.categoryIncludes.splice(i, 1);
                } else {
                    $scope.categoryIncludes.push(category);
                }


            };

            $scope.categoryFilter = function(store) {
                if ($scope.categoryIncludes.length > 0) {
                    if ($.inArray(store.category, $scope.categoryIncludes) < 0)
                        return;
                }

                return store;
            };





        }
    ]);
};
},{}],34:[function(require,module,exports){
'use strict';
var m = angular.module('ht.directives', []);


// controllers
require('./lib/route-loader')(m);




module.exports = m;
},{"./lib/route-loader":35}],35:[function(require,module,exports){
'use strict';
module.exports = function(m) {
    m.directive('routeLoader', function() {
        return {
            restrict: 'EA',
            link: function(scope, element) {
                // Store original display mode of element
                var shownType = element.css('display');

                function hideElement() {
                    element.css('display', 'none');
                }

                scope.$on('$routeChangeStart', function() {
                    element.css('display', shownType);
                });
                scope.$on('$routeChangeSuccess', hideElement);
                scope.$on('$routeChangeError', hideElement);
                // Initially element is hidden
                hideElement();
            }
        };
    });
};
},{}],36:[function(require,module,exports){
'use strict';
var m = angular.module('ht.filters', []);


// controllers
require('./lib/title-case')(m);
require('./lib/discount')(m);
require('./lib/value')(m);


module.exports = m;
},{"./lib/discount":37,"./lib/title-case":38,"./lib/value":39}],37:[function(require,module,exports){
'use strict';
module.exports = function(m) {
    m.filter('discount', function() {
        return function(stores, minD, maxD) {
            // console.log("FILTER STORE", minD, maxD);
            var filteredStores = [];

            for (var i = 0; i < stores.length; i = i + 1) {
                var store = stores[i];

                if (minD <= store.discount && store.discount <= maxD) {
                    filteredStores.push(store);
                }
            }

            return filteredStores;
        };
    });
};
},{}],38:[function(require,module,exports){
'use strict';
module.exports = function(m) {
    m.filter('titlecase', function() {
        return function(input) {
            var smallWords = /^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;

            input = input.toLowerCase();
            return input.replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g, function(match, index, title) {
                if (index > 0 && index + match.length !== title.length &&
                    match.search(smallWords) > -1 && title.charAt(index - 2) !== ':' &&
                    (title.charAt(index + match.length) !== ' - ' || title.charAt(index - 1) === ' - ') &&
                    title.charAt(index - 1).search(/[^\s-]/) < 0) {
                    return match.toLowerCase();
                }

                if (match.substr(1).search(/[A-Z]|\../) > -1) {
                    return match;
                }

                return match.charAt(0).toUpperCase() + match.substr(1);
            });
        };
    }).filter('storename', function() {
        return function(input) {
            return input.split('-').join(' ');
        };
    });
};
},{}],39:[function(require,module,exports){
'use strict';
module.exports = function(m) {
    m.filter('cardvalue', function() {
        return function(cards, minD, maxD) {
            // console.log("FILTER STORE", minD, maxD);
            var filteredCards = [];

            for (var i = 0; i < cards.length; i = i + 1) {
                var store = cards[i];

                if (minD <= store.value && store.value <= maxD) {
                    filteredCards.push(store);
                }
            }

            return filteredCards;
        };
    });
};
},{}],40:[function(require,module,exports){
'use strict';
var m = angular.module('ht.services', []);


// factories
require('./lib/store')(m);
require('./lib/user')(m);
require('./lib/auth')(m);
require('./lib/order')(m);
require('./lib/receipts')(m);
require('./lib/selling_cards')(m);
require('./lib/utils')(m);

module.exports = m;
},{"./lib/auth":41,"./lib/order":42,"./lib/receipts":43,"./lib/selling_cards":44,"./lib/store":45,"./lib/user":46,"./lib/utils":47}],41:[function(require,module,exports){
'use strict';


module.exports = function(m) {

    m.factory('authService', ['store', '$location', 'userService', '$modal', '$http',
        function(store, $location, userService, $modal, $http) {



            var login = function(callback) {

            };


            // 
            var logout = function(callback) {

            };

            var auth = function() {

            };

            var isAuthenticated = function() {

                console.log('CURRENT LOGGINED USER', store.get('user'));
                if (store.get('user')) {
                    return true;
                } else {
                    return false;
                }
            };



            return {
                'login': login,
                'logout': logout,
                'auth': auth,
                'isAuthenticated': isAuthenticated
            };
        }
    ]);
};
},{}],42:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.factory('orderService', ['$resource',
        function($resource) {

            return $resource('/api/orders/:id', null, {
                'get': {
                    method: 'GET',
                    'url': '/api/orders/:id'
                },
                'query': {
                    method: 'GET',
                    isArray: true,
                    'url': '/api/orders'
                },

            });
        }
    ]);
};
},{}],43:[function(require,module,exports){
'use strict';

module.exports = function(m) {
    m.factory('receiptService', ['$resource',
        function($resource) {

            return $resource('/api/receipts/:id', null, {
                'get': {
                    method: 'GET',
                    'url': '/api/receipts/:id'
                }

            });
        }
    ]);
};
},{}],44:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.factory('sellingCardsService', ['$resource',
        function($resource) {

            return $resource('/api/selling_cards/:id', null, {
                'get': {
                    method: 'GET',
                    'url': '/api/selling_cards/:id'
                }

            });
        }
    ]);
};
},{}],45:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.factory('storeService', ['$resource',
        function($resource) {

            return $resource('/api/stores/:id', null, {
                'featured': {
                    method: 'GET',
                    'url': '/api/stores/featured',
                    isArray: true
                },
                'highestPayout': {
                    method: 'GET',
                    'url': '/api/stores/highest-payout',
                    isArray: true
                },
                'get': {
                    method: 'GET',
                    'url': '/api/stores/:id',
                    isArray: true
                }
            });
        }
    ]);
};
},{}],46:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.factory('userService', ['$resource',
        function($resource) {

            return $resource('/api/users/:id', null, {
                'update': {
                    method: 'PUT'
                },
                'login': {
                    method: 'POST',
                    'url': '/api/users/login',
                },
                'get': {
                    method: 'GET'
                },
                'dealers': {
                    method: 'GET',
                    'url': '/api/users/dealers',
                    isArray: true
                },
                'forgetPassword': {
                    method: 'POST',
                    'url': '/api/users/forget-password',
                },
                'resetPassword': {
                    method: 'POST',
                    'url': '/api/users/reset-password',
                },
                'pay': {
                    method: 'POST',
                    'url': '/api/users/pay-order',
                },
                'sellCards': {
                    method: 'POST',
                    'url': '/api/users/sell-cards',
                },
                'getOrdersByUserId': {
                    method: 'GET',
                    'url': '/api/users/orders/:id',
                    isArray: true
                },
                'getSoldCardsByUserId': {
                    method: 'GET',
                    'url': '/api/users/sold-cards-list/:id',
                    isArray: true
                }
            });
        }
    ]);
};
},{}],47:[function(require,module,exports){
'use strict';


module.exports = function(m) {
    m.factory('utilService', ['$resource',
        function() {

            var totalOfferMailCard = function(card) {
                var total = 0;
                for (var i = 0; i < card.length; i = i + 1) {

                    // console.log('totalOfferMailCard', card[i]);
                    total += card[i].gogo_buy * card[i].value * card[i].amount / 100;
                }

                return total;
            };

            var totalOfferOnline = function(card) {
                var total = 0;
                for (var i = 0; i < card.length; i = i + 1) {
                    var subTotal = card[i].gogo_buy * card[i].value * card[i].amount / 100;

                    if (subTotal > 5) {
                        subTotal -= 5 * card[i].amount;
                    }
                    total += subTotal;
                }

                return total;
            };

            var totalFaceValue = function(cards) {
                var total = 0;
                for (var i = 0; i < cards.length; i = i + 1) {
                    total += cards[i].value;
                }

                return total;
            };

            var titleCase = function(str) {
                return str.replace(/\w\S*/g, function(txt) {
                    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                });
            };

            var averagePayout = function(cards) {
                var total = 0;
                for (var i = 0; i < cards.length; i = i + 1) {
                    total += cards[i].gogo_buy;
                }

                return total / cards.length;
            };

            return {
                totalOfferMailCard: totalOfferMailCard,
                totalOfferOnline: totalOfferOnline,
                titleCase: titleCase,
                totalFaceValue: totalFaceValue,
                averagePayout: averagePayout
            };
        }
    ]);
};
},{}]},{},[1]);
